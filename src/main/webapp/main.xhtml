<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui" xmlns:f="http://java.sun.com/jsf/core">
<h:head>
    <title>Main page</title>
    <meta charset="UTF-8"/>
    <h:outputStylesheet name="css/main.css"/>
</h:head>
<h:body>
    <h:form id="mainForm">
        <div class="window">
            <p:outputPanel id="coordinatePanelWrapper"
                           style="position: relative; margin-top: 10px; margin-left: 180px;">
                <p:outputPanel id="coordinatePanel" style="position: absolute; width: 400px; height: 400px;">
                    <svg width="400" height="400" onclick="drawPoint(event)">
                        <line x1="0" y1="200" x2="400" y2="200" style="stroke: black; stroke-width: 2"/>
                        <line x1="200" y1="0" x2="200" y2="400" style="stroke: black; stroke-width: 2"/>
                        <polygon points="400,200 390,195 390,205" style="fill: black"/>
                        <polygon points="200,0 195,10 205,10" style="fill: black"/>
                        <line x1="80" y1="195" x2="80" y2="205" style="stroke: black; stroke-width: 2"/>
                        <line x1="140" y1="195" x2="140" y2="205" style="stroke: black; stroke-width: 2"/>
                        <line x1="260" y1="195" x2="260" y2="205" style="stroke: black; stroke-width: 2"/>
                        <line x1="320" y1="195" x2="320" y2="205" style="stroke: black; stroke-width: 2"/>
                        <text id="Rx" x="75" y="220" font-size="12">-R</text>
                        <text id="R/2x" x="135" y="220" font-size="12">-R/2</text>
                        <text id="-R/2x" x="255" y="220" font-size="12">R/2</text>
                        <text id="-Rx" x="315" y="220" font-size="12">R</text>
                        <line x1="195" y1="80" x2="205" y2="80" style="stroke: black; stroke-width: 2"/>
                        <line x1="195" y1="140" x2="205" y2="140" style="stroke: black; stroke-width: 2"/>
                        <line x1="195" y1="260" x2="205" y2="260" style="stroke: black; stroke-width: 2"/>
                        <line x1="195" y1="320" x2="205" y2="320" style="stroke: black; stroke-width: 2"/>
                        <text id="Ry" x="180" y="85" font-size="12">R</text>
                        <text id="R/2y" x="180" y="145" font-size="12">R/2</text>
                        <text id="-R/2y" x="180" y="265" font-size="12">-R/2</text>
                        <text id="-Ry" x="180" y="325" font-size="12">-R</text>
                        <path d="M200,200 L200,80 A140,140 0 0,1 320,200 Z"
                              style="fill: rgba(225, 217, 206, 0.5); stroke: black; stroke-width: 2"/>
                        <polygon points="260,200 200,200 200,260"
                                 style="fill: rgba(225, 217, 206, 0.5); stroke: black; stroke-width: 2"/>
                        <polygon points="80,200 200,200 200,260 80,260"
                                 style="fill: rgba(225, 217, 206, 0.5); stroke: black; stroke-width: 2"/>
                    </svg>
                </p:outputPanel>
            </p:outputPanel>

            <div class="inputFields">
                <div class="select">
                    <h:outputLabel value="X:  "/>
                    <p:selectOneMenu id="xSelect" value="#{pointBean.x}" styleClass="slct">
                        <f:selectItem itemValue="-5" itemLabel="-5"/>
                        <f:selectItem itemValue="-4" itemLabel="-4"/>
                        <f:selectItem itemValue="-3" itemLabel="-3"/>
                        <f:selectItem itemValue="-2" itemLabel="-2"/>
                        <f:selectItem itemValue="-1" itemLabel="-1"/>
                        <f:selectItem itemValue="0" itemLabel="0"/>
                        <f:selectItem itemValue="1" itemLabel="1"/>
                    </p:selectOneMenu>
                </div>
                <div class="input">
                    <h:outputLabel value="Y:  ">
                        <h:inputText id="y" maxlength="3" value="#{pointBean.y}" styleClass="inpt">
                            <f:validateDoubleRange minimum="-3" maximum="3"/>
                        </h:inputText>
                    </h:outputLabel>
                    <p:message for="y"/>
                </div>
                <div class="select">
                    <h:outputLabel value="R: "/>
                    <p:selectOneMenu id="rSelect" value="#{pointBean.r}" styleClass="slct"
                                     onchange="changeR(this.value)">
                        <f:selectItem itemValue="1" itemLabel="1"/>
                        <f:selectItem itemValue="1.5" itemLabel="1.5"/>
                        <f:selectItem itemValue="2" itemLabel="2"/>
                        <f:selectItem itemValue="2.5" itemLabel="2.5"/>
                        <f:selectItem itemValue="3" itemLabel="3"/>
                    </p:selectOneMenu>
                </div>
            </div>
            <div class="button-container">
                <p:commandButton value="Submit" action="#{pointBean.savePoint()}" oncomplete="location.reload()" />
                <p:commandButton value="Reset" action="#{pointBean.deletePoints()}"/>
            </div>
        </div>
    </h:form>

    <h:dataTable value="#{pointBean.receivePoints()}" var="check">
        <h:column>
            <f:facet name="header">X</f:facet>
            <h:outputText value="#{check.x}"/>
        </h:column>
        <h:column>
            <f:facet name="header">Y</f:facet>
            <h:outputText value="#{check.y}"/>
        </h:column>
        <h:column>
            <f:facet name="header">R</f:facet>
            <h:outputText value="#{check.r}"/>
        </h:column>
        <h:column>
            <f:facet name="header">Result</f:facet>
            <h:outputText value="#{check.result}"/>
        </h:column>
        <h:column>
            <f:facet name="header">Time</f:facet>
            <h:outputText value="#{check.checkDate}"/>
        </h:column>
        <h:column>
            <f:facet name="header">Script Time(ms)</f:facet>
            <h:outputText value="#{check.executionTime}"/>
        </h:column>
    </h:dataTable>
    <div class="back">
        <h:button value="Back" outcome="toIndex" styleClass="back-button"/>
    </div>
</h:body>

<p:remoteCommand name="send" action="#{pointBean.sendJsPoint}" />

<script type="text/javascript">
    const svg = document.querySelector('svg');
    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");

    // EXAMPLE vvvvvvvvvvvvv
    function sendPoint() {
        send([{name: "x", value: 1}, {name: "y", value: 2}, {name: "r", value: 3}]);
    }

    function getPoints() {
        // USE ' ' to get string!!!!!!! vvvvvvv
        console.log(JSON.parse('#{pointBean.receiveJsonPoints()}'));
    }
    // EXAMPLE ^^^^^^^^^^^^^^^^
    function getNewXY() {
        const points = "#{pointBean.receivePoints()}"
        const x = "#{pointBean.x}"
        const y = "#{pointBean.y}";
        const r = "#{pointBean.r}";
        console.log(points);
        console.log(x,y,r);
        const width = 400;
        const height = 400;
        const centerX = width / 2;
        const centerY = height / 2;
        const cx = centerX + x * (width / (3.3 * r));
        const cy = centerY - y * (height / (3.3 * r));
        console.log(cx,cy)
        setRound(svg, cx, cy);
    }

    window.onload = function () {
        getNewXY();
    };

    function changeR(r) {
        const elements = {
            "Ry": r,
            "R/2y": r / 2,
            "-R/2y": -r / 2,
            "-Ry": -r,
            "Rx": -r,
            "R/2x": -r / 2,
            "-R/2x": r / 2,
            "-Rx": r
        };

        for (const id in elements) {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = elements[id] ? elements[id].toString() : "";
            }
        }
    }

    function drawPoint(event) {
        const point = getXY(svg, event);
        const xPoint = point.x;
        const yPoint = point.y;

        const existingPoints = svg.querySelectorAll("circle");
        existingPoints.forEach((point) => {
            point.parentNode.removeChild(point);
        });
console.log(xPoint,yPoint);
        setRound(svg, xPoint, yPoint);
    }
    function getXY(svg, event) {
        const rect = svg.getBoundingClientRect();
        return {x: event.clientX - rect.left, y: event.clientY - rect.top};
    }

    function setRound(svg, cx, cy) {
        circle.setAttribute("cx", cx);
        circle.setAttribute("cy", cy);
        circle.setAttribute("r", '5');
        circle.setAttribute("fill", "red");
        svg.appendChild(circle);
    }


</script>
</html>
